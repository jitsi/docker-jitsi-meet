!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/libs/",n(n.s=2)}([function(t,e){function n(){return new DOMException("The request is not allowed","NotAllowedError")}
/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
t.exports=async function(t){try{await async function(t){if(!navigator.clipboard)throw n();return navigator.clipboard.writeText(t)}(t)}catch(e){try{await async function(t){const e=document.createElement("span");e.textContent=t,e.style.whiteSpace="pre",e.style.webkitUserSelect="auto",e.style.userSelect="all",document.body.appendChild(e);const o=window.getSelection(),r=window.document.createRange();o.removeAllRanges(),r.selectNode(e),o.addRange(r);let c=!1;try{c=window.document.execCommand("copy")}finally{o.removeAllRanges(),window.document.body.removeChild(e)}if(!c)throw n()}(t)}catch(t){throw t||e||n()}}}},function(t,e,n){"use strict";const o=/"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*\:/;e.parse=function(t,...n){const r="object"==typeof n[0]&&n[0],c=n.length>1||!r?n[0]:void 0,i=n.length>1&&n[1]||r||{},a=JSON.parse(t,c);return"ignore"===i.protoAction?a:a&&"object"==typeof a&&t.match(o)?(e.scan(a,i),a):a},e.scan=function(t,e={}){let n=[t];for(;n.length;){const t=n;n=[];for(const o of t){if(Object.prototype.hasOwnProperty.call(o,"__proto__")){if("remove"!==e.protoAction)throw new SyntaxError("Object contains forbidden prototype property");delete o.__proto__}for(const t in o){const e=o[t];e&&"object"==typeof e&&n.push(o[t])}}}},e.safeParse=function(t,n){try{return e.parse(t,n)}catch(t){return null}}},function(t,e,n){"use strict";n.r(e);n(0);var o=n(1),r=n.n(o);const c=["__proto__","constructor","prototype"];function i(t,e=!1,n="hash"){const o="search"===n?t.search:t.hash,i={},a=o&&o.substr(1).split("&")||[];if("hash"===n&&1===a.length){const t=a[0];if(t.startsWith("/")&&1===t.split("&").length)return i}return a.forEach(t=>{const n=t.split("="),o=n[0];if(!o||o.split(".").some(t=>c.includes(t)))return;let a;try{if(a=n[1],!e){const t=decodeURIComponent(a).replace(/\\&/,"&");a="undefined"===t?void 0:r.a.parse(t)}}catch(t){return void function(t,e=""){console.error(e,t),window.onerror&&window.onerror(e,null,null,null,t)}(t,"Failed to parse URL parameter value: "+String(a))}i[o]=a}),i}function a(t){if(!t)return t;try{t=decodeURIComponent(t)}catch(t){}return t=(t=t.normalize("NFKC")).toLowerCase(),(t=encodeURIComponent(t)).toLowerCase()}if("function"==typeof createConnectionExternally){let t=i(window.location,!0,"hash")["config.externalConnectUrl"]||config.websocket?void 0:config.externalConnectUrl;const e=i(window.location,!0,"hash")["config.iAmRecorder"];let n;if(t&&(n=function(){const t=window.location.pathname;return a(t.substring(t.lastIndexOf("/")+1)||void 0)}())&&!e){t+="?room="+n;const e=i(window.location,!0,"search").jwt;e&&(t+="&token="+e),createConnectionExternally(t,t=>{window.XMPPAttachInfo={status:"success",data:t},s()},l)}else l()}else l();function s(){window.APP&&"ready"===window.APP.connect.status&&window.APP.connect.handler()}function l(t){t&&console.warn(t),window.XMPPAttachInfo={status:"error"},s()}}]);
//# sourceMappingURL=do_external_connect.min.map