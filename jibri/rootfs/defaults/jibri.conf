jibri {
    // A unique identifier for this Jibri
    // TODO: eventually this will be required with no default
    id = "jibri-instance-{{ .Env.JIBRI_INSTANCE_ID }}"

    api {
      {{ if or .Env.JIBRI_HTTP_API_EXTERNAL_PORT .Env.JIBRI_HTTP_API_INTERNAL_PORT -}}
      http {
        {{ if .Env.JIBRI_HTTP_API_EXTERNAL_PORT -}}
        external-api-port = {{ .Env.JIBRI_HTTP_API_EXTERNAL_PORT }}
        {{ end -}}
        {{ if .Env.JIBRI_HTTP_API_INTERNAL_PORT -}}
        internal-api-port = {{ .Env.JIBRI_HTTP_API_INTERNAL_PORT }}
        {{ end -}}
      }
      {{ end -}}
      xmpp {
        // See example_xmpp_envs.conf for an example of what is expected here
        environments = [
            {
                // A user-friendly name for this environment
                name = "{{ .Env.XMPP_ENV_NAME }}"
    
                // A list of XMPP server hosts to which we'll connect
                xmpp-server-hosts = [ 
                    "{{ .Env.XMPP_SERVER }}"
                ]
    
                // The base XMPP domain
                xmpp-domain = "{{ .Env.XMPP_DOMAIN }}"

                {{ if .Env.PUBLIC_URL -}}
                // An (optional) base url the Jibri will join if it is set
                base-url = "{{ .Env.PUBLIC_URL }}"
                {{ end -}}
                
                // The MUC we'll join to announce our presence for
                // recording and streaming services
                control-muc {
                    domain = "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
                    room-name = "{{ .Env.JIBRI_BREWERY_MUC }}"
                    nickname = "jibri-instance-{{ .Env.JIBRI_INSTANCE_ID }}"
                }
    
                // The login information for the control MUC
                control-login {
                    domain = "{{ .Env.XMPP_AUTH_DOMAIN }}"
                    username = "{{ .Env.JIBRI_XMPP_USER }}"
                    password = "{{ .Env.JIBRI_XMPP_PASSWORD }}"
                }
                
                sip-control-muc {
                    domain = "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
                    room-name = "{{ .Env.JIBRI_BREWERY_MUC }}"
                    nickname = "jibri-instance-{{ .Env.JIBRI_INSTANCE_ID }}"
                }

                // The login information the selenium web client will use
                call-login {
                    domain = "{{ .Env.XMPP_RECORDER_DOMAIN }}"
                    username = "{{ .Env.JIBRI_RECORDER_USER }}"
                    password = "{{ .Env.JIBRI_RECORDER_PASSWORD }}"
                }
                
                // The value we'll strip from the room JID domain to derive
                // the call URL
                strip-from-room-domain = "{{ .Env.JIBRI_STRIP_DOMAIN_JID }}."
    
                {{ if .Env.JIBRI_USAGE_TIMEOUT -}}
                // How long Jibri sessions will be allowed to last before
                // they are stopped.  A value of 0 allows them to go on
                // indefinitely
                usage-timeout = "{{ .Env.JIBRI_USAGE_TIMEOUT }}"
                {{ end -}}    
                
                {{ if .Env.XMPP_TRUST_ALL_CERTS -}}
                // Whether or not we'll automatically trust any cert on
                // this XMPP domain
                trust-all-xmpp-certs = {{ .Env.XMPP_TRUST_ALL_CERTS }}
                {{ end -}}
            }
        ]
      }
    }
    recording {
      recordings-directory = "{{ .Env.JIBRI_RECORDING_DIR }}"
      {{ if .Env.JIBRI_FINALIZE_RECORDING_SCRIPT_PATH -}}
      finalize-script = "{{ .Env.JIBRI_FINALIZE_RECORDING_SCRIPT_PATH }}"
      {{ end -}}
    }

    ffmpeg {
      {{ if .Env.JIBRI_FFMPEG_RESOLUTION -}}
      resolution =  "{{ .Env.JIBRI_FFMPEG_RESOLUTION }}"
      {{ end -}}
      {{ if .Env.JIBRI_FFMPEG_AUDIO_SOURCE -}}
      // The audio source that will be used to capture audio on Linux
      audio-source = "{{ .Env.JIBRI_FFMPEG_AUDIO_SOURCE }}"
      {{ end -}}
      {{ if .Env.JIBRI_FFMPEG_AUDIO_DEVICE -}}
      // The audio device that will be used to capture audio on Linux
      audio-device =  "{{ .Env.JIBRI_FFMPEG_AUDIO_DEVICE }}"
      {{ end -}}
    }

    {{ if .Env.CHROMIUM_FLAGS -}}
    chrome {
      // The flags which will be passed to chromium when launching
      flags = [
        "{{ join "\",\"" (splitList "," .Env.CHROMIUM_FLAGS) }}"
      ]
    }
    {{ end -}}

    {{ if .Env.ENABLE_STATS_D -}}
    stats {
      enable-stats-d = {{ .Env.ENABLE_STATS_D }}
    }
    {{ end -}}
}