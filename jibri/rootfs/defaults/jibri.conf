{{ $ENABLE_JIBRI_HTTP_API_PORT := .Env.ENABLE_JIBRI_HTTP_API_PORT | default "1" | toBool }}
jibri {
    // A unique identifier for this Jibri
    // TODO: eventually this will be required with no default
    id = "jibri-instance-{{ .Env.JIBRI_INSTANCE_ID }}"
    
    api {
        {{ if $ENABLE_JIBRI_HTTP_API_PORT -}}
        http {
            {{  if .Env.JIBRI_HTTP_API_EXTERNAL_PORT -}}
            external-api-port = {{ .Env.JIBRI_HTTP_API_EXTERNAL_PORT }}
            {{ end -}}
            {{ if .Env.JIBRI_HTTP_API_INTERNAL_PORT -}}
            internal-api-port = {{ .Env.JIBRI_HTTP_API_INTERNAL_PORT }}
            {{ end -}}
        }
        {{ end -}}
        xmpp {
            environments = [
                {
                    // A user-friendly name for this environment
                    name = "{{ .Env.XMPP_ENV_NAME }}"

                    // A list of XMPP server hosts to which we will connect
                    xmpp-server-hosts = [
                        "{{ .Env.XMPP_SERVER }}"
                    ]

                    // The base XMPP domain
                    xmpp-domain = "{{ .Env.XMPP_DOMAIN }}"

                    // The MUC we will join to announce our presence for
                    // recording and streaming services
                    control-muc {
                        domain = "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
                        room-name = "{{ .Env.JIBRI_BREWERY_MUC }}"
                        nickname = "jibri-instanse-{{ .Env.JIBRI_INSTANCE_ID }}"
                    }

                    // The login information for the control MUC
                    control-login {
                        domain = "{{ .Env.XMPP_AUTH_DOMAIN }}"
                        username = "{{ .Env.JIBRI_XMPP_USER }}"
                        password = "{{ .Env.JIBRI_XMPP_PASSWORD }}"
                    }

                    sip-control-muc {
                        domain = "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
                        room-name = "{{ .Env.JIBRI_BREWERY_MUC }}"
                        nickname = "jibri-instanse-{{ .Env.JIBRI_INSTANCE_ID }}"
                    }

                    // The login information the selenium web client will use
                    call-login {
                        domain = "{{ .Env.XMPP_RECORDER_DOMAIN }}"
                        username = "{{ .Env.JIBRI_RECORDER_USER }}"
                        password = "{{ .Env.JIBRI_RECORDER_PASSWORD }}"
                    }

                    // The value we will strip from the room JID domain to derive
                    // the call URL
                    strip-from-room-domain = "{{ .Env.JIBRI_STRIP_DOMAIN_JID }}."
                    
                    {{ if .Env.JIBRI_USAGE_TIMEOUT -}}
                    // How long Jibri sessions will be allowed to last before
                    // they are stopped.  A value of 0 allows them to go on
                    // indefinitely
                    usage-timeout = "{{ .Env.JIBRI_USAGE_TIMEOUT }}"
                    {{ end -}}    

                    {{ if .Env.XMPP_TRUST_ALL_CERTS -}}
                    // Whether or not we will automatically trust any cert on
                    // this XMPP domain
                    trust-all-xmpp-certs = {{ .Env.XMPP_TRUST_ALL_CERTS }}
                    {{ end -}}
                }
	    ]
        }
    }
    recording {
        recordings-directory = "{{ .Env.JIBRI_RECORDING_DIR }}"
        {{ if .Env.JIBRI_FINALIZE_RECORDING_SCRIPT_PATH -}}
            "finalize-script": "{{ .Env.JIBRI_FINALIZE_RECORDING_SCRIPT_PATH }}"
        {{ end -}}
    }

    {{ if .Env.ENABLE_STATS_D -}}
    stats {
      enable-stats-d = {{ .Env.ENABLE_STATS_D }}
    }
    {{ end -}}

    {{ if .Env.CHROMIUM_FLAGS -}}
    chrome {
        flags = [
            "{{ join "\",\"" (splitList "," .Env.CHROMIUM_FLAGS) }}"
        ]
    }
    {{ end -}}
}
